[ { "title" : "Increase Maximum Upload size in Wordpress (All Ways)" ,"category" : "jekyll" ,"tags" : "wordpress, php, html" ,"url" : "/wordpress_increase_upload_memory.html" ,"date" : "Jul 17, 2023" ,"content" : "Increase Maximum Upload size in Wordpress (All Ways) Method 1: Find the wp-config.php file in the root folder or directory. To open the wp-config.php file, double-click it. Choose Edit. Locate the line Add the following code directly above the line in step five: specify(‘WP_MEMORY_LIMIT’, ‘256M’);" },{ "title" : "UDP Server for KUKA RSI - Python Server with GUI for Axis Jogging from Master Computer | ROS Connectivity to KUKA Robot via Robot Sensor Interface" ,"category" : "jekyll" ,"tags" : "robotics, industrial automation, example post" ,"url" : "/kukaserver.html" ,"date" : "Feb 2, 2023" ,"content" : "KUKA Robot controller has inbuilt Ethernet port called KLI (KUKA LINE INTERFACE, Static IP) which is used for UDP/TCP IP connections from external system. Real Time Axis/Cartesian Position corrections (Delta) can be achieved via KUKA Optional Technology Package called RSI.(Robot Sensor Interface) Now, Here RSI installed on Controller will behave as UDP Client and External Computer/System should be Server. Step 1: Use RSIVisual (Graphical XML/RSI Editor) supplied by KUKA to generate .XML and .RSI files. Step 2: Copy all these (.RSI, .Diagram, .XML, Config.XML) files inside KUKA Controller under path: C:/KRC/Roboter/Config/User/Common/SensorInterface Step 3: Start ServerApp.py on External Computer. (ServerApp.py Attached) Step 4: Run RSI_Ethernet.src file on KUKA Controller. (This src is supplied by KUKA RSI — Example Folder) Step 5: Post Connection is established with Controller, Run GUI.py to Control Axis 1 to Axis 6 in Real Time. Enjoy! Thanks. Project Source Code - https://github.com/pawankumardev/kukarsiserver Source 1: Example Code to demonstrate working principle of KUKA RSI IPOC Reflection using PY: # if the customer is creating his own server with someother software then python then provide him the Port no of the Cotroller which will # be coming on \"socket_of_krc\" line no 38 import socket UDP_IP = \"192.168.1.100\" # ip address of your computer UDP_PORT = 59152 #port enabled in KRC NAT port configuration sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # Create a UDP socket sock.bind((UDP_IP, UDP_PORT)) xml_file = open(\"rsi.xml\", \"r\") #the rsi.xml files contains the data that is to be send default_command = xml_file.read() # The function below is used to reflect the IPOC value received from the controller data. if the IPOC does not reply for the given timeout set in Ethernet #block of the kuka RSIX file the controller shows an error of RSI bad Timeout. def mirroripoc(received_data, data_to_send): ipoc_begin_index = int (received_data.index(\"&lt;IPOC&gt;\")) ipoc_end_index = int(received_data.index(\"&lt;/IPOC&gt;\")) received_ipoc = int (received_data[ipoc_begin_index + 6: ipoc_end_index]) old_ipoc_begin_index = data_to_send.index(\"&lt;IPOC&gt;\") old_ipoc_end_index = data_to_send.index(\"&lt;/IPOC&gt;\") old_ipoc = data_to_send[old_ipoc_begin_index + 6: old_ipoc_end_index] oldipocrsi = f\"&lt;IPOC&gt;{old_ipoc}&lt;/IPOC&gt;\" newipocrsi = f\"&lt;IPOC&gt;{received_ipoc}&lt;/IPOC&gt;\" return data_to_send.replace(oldipocrsi,newipocrsi) while True: received_data, socket_of_krc = sock.recvfrom(1024) # buffer size is 1024 bytes received_data = received_data.decode('utf-8') data_to_send = default_command data_to_send = mirroripoc(received_data, data_to_send) bytesToSend = str.encode(data_to_send) sock.sendto(bytesToSend, socket_of_krc) xml_file.close() Source 2: Server with GUI for RSI Jogging of KUKA Robot: ServerApp.py : Connects to KUKA Controller. Read Write ActualPos.xml import socket import os import time; from bs4 import BeautifulSoup import xml.etree.cElementTree as ET import sys localIP = \"192.168.100.111\" ## Address of your Computer -- Same must be entered in RSI Config File localPort = 9508 ## Port on your computer bufferSize = 1024 ## No need to change # Create a datagram socket UDPServerSocket = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM) # Bind to address and ip UDPServerSocket.bind((localIP, localPort)) print(\"UDP server up and listening for KUKA RSI ! - Set your Server Computer IP to 192.168.100.111 , Port : 9508 \") # Listen for incoming datagrams while(True): bytesAddressPair = UDPServerSocket.recvfrom(bufferSize) message = bytesAddressPair[0] address = bytesAddressPair[1] clientMsg = format(message) clientIP = \"Client IP Address:{}\".format(address) #print(clientMsg) receivedData = BeautifulSoup(message, 'html.parser') #print(receivedData) axis1_act = receivedData.a1.get_text() axis2_act = receivedData.a2.get_text() axis3_act = receivedData.a3.get_text() axis4_act = receivedData.a4.get_text() axis5_act = receivedData.a5.get_text() axis6_act = receivedData.a6.get_text() ## Write to XML Actual Position root = ET.Element(\"root\") ET.SubElement(root, \"Axis1\").text = axis1_act ET.SubElement(root, \"Axis2\").text = axis2_act ET.SubElement(root, \"Axis3\").text = axis3_act ET.SubElement(root, \"Axis4\").text = axis4_act ET.SubElement(root, \"Axis5\").text = axis5_act ET.SubElement(root, \"Axis6\").text = axis6_act tree = ET.ElementTree(root) tree.write(\"actualpos.xml\") ##Corrections Read from XML axiscorr and apply the same tree1 = ET.parse('axiscorr.xml') axis1_corr = tree1.find('Axis1').text axis2_corr = tree1.find('Axis2').text axis3_corr = tree1.find('Axis3').text axis4_corr = tree1.find('Axis4').text axis5_corr = tree1.find('Axis5').text axis6_corr = tree1.find('Axis6').text direction = tree1.find('Direction').text if(direction==\"0\"): axis1_corr = \"-\"+axis1_corr axis2_corr = \"-\"+axis2_corr axis3_corr = \"-\"+axis3_corr axis4_corr = \"-\"+axis4_corr axis5_corr = \"-\"+axis5_corr axis6_corr = \"-\"+axis6_corr ## Correction ##Sending XML to RSI Client reflectIPOC = '&lt;Sen Type=\"ImFree\"&gt;&lt;EStr&gt;Message from RSI Control Server - PPG !&lt;/EStr&gt;&lt;AxisCorr A1=\"'+axis1_corr+'\" A2=\"'+axis2_corr+'\" A3=\"'+axis3_corr+'\" A4=\"'+axis4_corr+'\" A5=\"'+axis5_corr+'\" A6=\"'+axis6_corr+'\"&gt;&lt;RKorr X=\"0.00001\" Y=\"0.0000\" Z=\"0.0000\" A=\"0.0000\" B=\"0.0000\" C=\"0.0000\" /&gt;&lt;IPOC&gt;'+receivedData.ipoc.getText()+'&lt;/IPOC&gt;&lt;/Sen&gt;\\n' print(\"Commandin with &lt;IPOC&gt;:\"+receivedData.ipoc.getText()+\", Axis Actual Pos: \" + (axis1_act+\",\"+axis2_act+\",\"+axis3_act+\",\"+axis4_act+\",\"+axis5_act+\",\"+axis6_act)) bytesToSend = str.encode(reflectIPOC) UDPServerSocket.sendto(bytesToSend, address) GUI.py - Writes Corrections to AxisCorr.xml from tkinter import * import xml.etree.cElementTree as ET window = Tk() window.title(\"PawankumarG.com/KUKARSIServer\") window.geometry('600x600') delta = \"0.01\" # Jogging speed axis1 = Label(window, text=\"Axis 1\") axis2 = Label(window, text=\"Axis 2\") axis3 = Label(window, text=\"Axis 3\") axis4 = Label(window, text=\"Axis 4\") axis5 = Label(window, text=\"Axis 5\") axis6 = Label(window, text=\"Axis 6\") axis1.grid(column=0, row=0) axis2.grid(column=0, row=1) axis3.grid(column=0, row=2) axis4.grid(column=0, row=3) axis5.grid(column=0, row=4) axis6.grid(column=0, row=5) def clicked1p(): print(\"axis 1 plus\") delta = txtfld.get() root = ET.Element(\"root\") ET.SubElement(root, \"Axis1\").text = delta ET.SubElement(root, \"Axis2\").text = \"0.0\" ET.SubElement(root, \"Axis3\").text = \"0.0\" ET.SubElement(root, \"Axis4\").text = \"0.0\" ET.SubElement(root, \"Axis5\").text = \"0.0\" ET.SubElement(root, \"Axis6\").text = \"0.0\" ET.SubElement(root, \"Direction\").text = \"1\" tree = ET.ElementTree(root) tree.write(\"axiscorr.xml\") def clicked2p(): print(\"axis 2 plus\") delta = txtfld.get() root = ET.Element(\"root\") ET.SubElement(root, \"Axis1\").text = \"0.0\" ET.SubElement(root, \"Axis2\").text = delta ET.SubElement(root, \"Axis3\").text = \"0.0\" ET.SubElement(root, \"Axis4\").text = \"0.0\" ET.SubElement(root, \"Axis5\").text = \"0.0\" ET.SubElement(root, \"Axis6\").text = \"0.0\" ET.SubElement(root, \"Direction\").text = \"1\" tree = ET.ElementTree(root) tree.write(\"axiscorr.xml\") def clicked3p(): print(\"axis 3 plus\") delta = txtfld.get() root = ET.Element(\"root\") ET.SubElement(root, \"Axis1\").text = \"0.0\" ET.SubElement(root, \"Axis2\").text = \"0.0\" ET.SubElement(root, \"Axis3\").text = delta ET.SubElement(root, \"Axis4\").text = \"0.0\" ET.SubElement(root, \"Axis5\").text = \"0.0\" ET.SubElement(root, \"Axis6\").text = \"0.0\" ET.SubElement(root, \"Direction\").text = \"1\" tree = ET.ElementTree(root) tree.write(\"axiscorr.xml\") def clicked4p(): print(\"axis 4 plus\") delta = txtfld.get() root = ET.Element(\"root\") ET.SubElement(root, \"Axis1\").text = \"0.0\" ET.SubElement(root, \"Axis2\").text = \"0.0\" ET.SubElement(root, \"Axis3\").text = \"0.0\" ET.SubElement(root, \"Axis4\").text = delta ET.SubElement(root, \"Axis5\").text = \"0.0\" ET.SubElement(root, \"Axis6\").text = \"0.0\" ET.SubElement(root, \"Direction\").text = \"1\" tree = ET.ElementTree(root) tree.write(\"axiscorr.xml\") def clicked5p(): print(\"axis 5 plus\") delta = txtfld.get() root = ET.Element(\"root\") ET.SubElement(root, \"Axis1\").text = \"0.0\" ET.SubElement(root, \"Axis2\").text = \"0.0\" ET.SubElement(root, \"Axis3\").text = \"0.0\" ET.SubElement(root, \"Axis4\").text = \"0.0\" ET.SubElement(root, \"Axis5\").text = delta ET.SubElement(root, \"Axis6\").text = \"0.0\" ET.SubElement(root, \"Direction\").text = \"1\" tree = ET.ElementTree(root) tree.write(\"axiscorr.xml\") def clicked6p(): print(\"axis 6 plus\") delta = txtfld.get() root = ET.Element(\"root\") ET.SubElement(root, \"Axis1\").text = \"0.0\" ET.SubElement(root, \"Axis2\").text = \"0.0\" ET.SubElement(root, \"Axis3\").text = \"0.0\" ET.SubElement(root, \"Axis4\").text = \"0.0\" ET.SubElement(root, \"Axis5\").text = \"0.0\" ET.SubElement(root, \"Axis6\").text = delta ET.SubElement(root, \"Direction\").text = \"1\" tree = ET.ElementTree(root) tree.write(\"axiscorr.xml\") ### def clicked1n(): print(\"axis 1 minus\") delta = txtfld.get() root = ET.Element(\"root\") ET.SubElement(root, \"Axis1\").text = delta ET.SubElement(root, \"Axis2\").text = \"0.0\" ET.SubElement(root, \"Axis3\").text = \"0.0\" ET.SubElement(root, \"Axis4\").text = \"0.0\" ET.SubElement(root, \"Axis5\").text = \"0.0\" ET.SubElement(root, \"Axis6\").text = \"0.0\" ET.SubElement(root, \"Direction\").text = \"0\" tree = ET.ElementTree(root) tree.write(\"axiscorr.xml\") def clicked2n(): print(\"axis 2 minus\") delta = txtfld.get() root = ET.Element(\"root\") ET.SubElement(root, \"Axis1\").text = \"0.0\" ET.SubElement(root, \"Axis2\").text = delta ET.SubElement(root, \"Axis3\").text = \"0.0\" ET.SubElement(root, \"Axis4\").text = \"0.0\" ET.SubElement(root, \"Axis5\").text = \"0.0\" ET.SubElement(root, \"Axis6\").text = \"0.0\" ET.SubElement(root, \"Direction\").text = \"0\" tree = ET.ElementTree(root) tree.write(\"axiscorr.xml\") def clicked3n(): print(\"axis 3 minus\") delta = txtfld.get() root = ET.Element(\"root\") ET.SubElement(root, \"Axis1\").text = \"0.0\" ET.SubElement(root, \"Axis2\").text = \"0.0\" ET.SubElement(root, \"Axis3\").text = delta ET.SubElement(root, \"Axis4\").text = \"0.0\" ET.SubElement(root, \"Axis5\").text = \"0.0\" ET.SubElement(root, \"Axis6\").text = \"0.0\" ET.SubElement(root, \"Direction\").text = \"0\" tree = ET.ElementTree(root) tree.write(\"axiscorr.xml\") def clicked4n(): print(\"axis 4 minus\") delta = txtfld.get() root = ET.Element(\"root\") ET.SubElement(root, \"Axis1\").text = \"0.0\" ET.SubElement(root, \"Axis2\").text = \"0.0\" ET.SubElement(root, \"Axis3\").text = \"0.0\" ET.SubElement(root, \"Axis4\").text = delta ET.SubElement(root, \"Axis5\").text = \"0.0\" ET.SubElement(root, \"Axis6\").text = \"0.0\" ET.SubElement(root, \"Direction\").text = \"0\" tree = ET.ElementTree(root) tree.write(\"axiscorr.xml\") def clicked5n(): print(\"axis 5 minus\") delta = txtfld.get() root = ET.Element(\"root\") ET.SubElement(root, \"Axis1\").text = \"0.0\" ET.SubElement(root, \"Axis2\").text = \"0.0\" ET.SubElement(root, \"Axis3\").text = \"0.0\" ET.SubElement(root, \"Axis4\").text = \"0.0\" ET.SubElement(root, \"Axis5\").text = delta ET.SubElement(root, \"Axis6\").text = \"0.0\" ET.SubElement(root, \"Direction\").text = \"0\" tree = ET.ElementTree(root) tree.write(\"axiscorr.xml\") def clicked6n(): print(\"axis 6 minus\") delta = txtfld.get() root = ET.Element(\"root\") ET.SubElement(root, \"Axis1\").text = \"0.0\" ET.SubElement(root, \"Axis2\").text = \"0.0\" ET.SubElement(root, \"Axis3\").text = \"0.0\" ET.SubElement(root, \"Axis4\").text = \"0.0\" ET.SubElement(root, \"Axis5\").text = \"0.0\" ET.SubElement(root, \"Axis6\").text = \"0.0\" ET.SubElement(root, \"Direction\").text = \"0\" tree = ET.ElementTree(root) tree.write(\"axiscorr.xml\") def ClickstartRobot(): print(\"Stoping Robot\") root = ET.Element(\"root\") ET.SubElement(root, \"Axis1\").text = \"0.0\" ET.SubElement(root, \"Axis2\").text = \"0.0\" ET.SubElement(root, \"Axis3\").text = \"0.0\" ET.SubElement(root, \"Axis4\").text = \"0.0\" ET.SubElement(root, \"Axis5\").text = \"0.0\" ET.SubElement(root, \"Axis6\").text = \"0.0\" ET.SubElement(root, \"Direction\").text = \"0\" tree = ET.ElementTree(root) tree.write(\"axiscorr.xml\") startRobot = Button(window, text=\"Stop Robot Movement\", command=ClickstartRobot) inc = Label(window, text=\"Stop Robot Movement\") axis1p = Button(window, text=\"Positive\", command=clicked1p) axis2p = Button(window, text=\"Positive\", command=clicked2p) axis3p = Button(window, text=\"Positive\", command=clicked3p) axis4p = Button(window, text=\"Positive\", command=clicked4p) axis5p = Button(window, text=\"Positive\", command=clicked5p) axis6p = Button(window, text=\"Positive\", command=clicked6p) axis1n = Button(window, text=\"Negative\", command=clicked1n) axis2n = Button(window, text=\"Negative\", command=clicked2n) axis3n = Button(window, text=\"Negative\", command=clicked3n) axis4n = Button(window, text=\"Negative\", command=clicked4n) axis5n = Button(window, text=\"Negative\", command=clicked5n) axis6n = Button(window, text=\"Negative\", command=clicked6n) txtfld=Entry(window, text=\"This is Entry Widget\", bd=5) txtfld.insert(END, '0.001') startRobot.grid(column=5, row=3) txtfld.grid(column=6, row=3) axis1p.grid(column=1, row=0) axis2p.grid(column=1, row=1) axis3p.grid(column=1, row=2) axis4p.grid(column=1, row=3) axis5p.grid(column=1, row=4) axis6p.grid(column=1, row=5) axis1n.grid(column=2, row=0) axis2n.grid(column=2, row=1) axis3n.grid(column=2, row=2) axis4n.grid(column=2, row=3) axis5n.grid(column=2, row=4) axis6n.grid(column=2, row=5) window.mainloop() Q&amp;A RSI (Robot Sensor Interface) is an KUKA Optional package (Add-on on KUKA Software) which has following functions: KUKA Controller is connected to your Computer (ROS is here) with Ethernet LAN Cable. As we know ROS needs to send and receive axis position in Real Time. RSI installation enables Real Time connection between KUKA Controller and Computer with data transfer rate at 4 ms. RSI enable Soft Real Time i.e. 4 ms of data polling from ROS. Without RSI 4 ms data rate is NOT possible, as System Software has 12ms of Interpolation Time. RSI enable UDP data exchange with handshaking, Real Time Cartesian and Joint motion Correction. RSI Visual Shell allows you to create RSI Objects in Graphical Interface which is finally exported to XML files. Refer link to know how RSI interface is going to help for ROS: https://bit.ly/kukarsi KRL files are programs on KUKA Controller (On SmartHMI), mandatory to Start during initializing robot motion. Once KRL (KUKA Roboter Language) program started on controller then ROS can command robot for motion control. Point no. 2 is mandatory due to safety reasons. (BCO Run, Field Safety). KRL file create Ethernet node on KUKA Side where external ROS node will connect. KUKA RSI-Ethernet is always Client, External ROS will be Server. On running KRL file we are creating client socket on KUKA side and ROS will be Server." },{ "title" : "Emerging Tech Trend| Human-Robot Collaboration (HRC) ~ Next Leap of Industrial Robotics" ,"category" : "jekyll" ,"tags" : "robotics, industrial automation, example post" ,"url" : "/HRC.html" ,"date" : "Jan 1, 2021" ,"content" : "Humans and robots are working more closely together as technology improves. This is increasing the productivity of companies and the quality of products, leading to efficiency and growth. In many cases robots increase output so much that more jobs are created in complementary jobs. Researchers and companies are improving the safety of robot systems so humans can work close beside robots that become co-workers, more than mere tools. The next step for robot makers, software companies and engineers is to refine human-robot job augmentation further to achieve a greater shift in productivity, freeing people to do higher value and less dangerous work. For decades robots have fulfilled one of two broad applications: Large industrial robots, programmed offline, work in defined, linear pathways to typically move, assemble or weld a manufactured component on a production line, and Domestic and service robots. Lighter and softer applications, these help in more nuanced settings, from inspection of hostile environments, to helping humans in the home; from vacuum cleaning to healthcare and even social care applications. The development of smaller “desktop” robots, known as collaborative robots or “cobots”, was brought about from a new application of robots that is rapidly taking hold globally: Human Robot Collaboration (or HRC). There are new business and domestic scenarios where robots are designed to work alongside humans – rather than as a distinctly separate and binary tool behind a cage. It’s like an extension of the human activity, a human working but with added capabilities. ##THE CHALLENGE Until recently, robots have been constrained in their utility. They perform a limited range of tasks in a linear and literal way. They are programmed offline and could not respond to new stimuli in mid-task. Industrial robots are heavy, fast and potentially dangerous to humans working in proximity. But many industrial applications demand a robot solution to increase throughput where the human worker is doing tasks that can be replaced, for example where: The task is simple and repeated identically multiple times but needs to be accurate. Requires more than one worker but not as many as two (e.g 1.2 people). The task could cause stress or even injury to the operator. The challenge is to modify a robot’s parameters to make it sensitive to human presence, to slow its speed and power in proximity to humans and to develop technology that allows the collaborative robot or cobot, to assist the human like an intuitive co-worker, not a heavy and dangerous threat. Cobots have very sophisticated force-torque sensors, so they sense when people are near them – a person can now interact in the same space knowing that the robot will stop if they intrude within set parameters, and then carries on what it is doing. The business case for HRC is greater productivity enabling more output and therefore growth, repeatability, redeploying labor into better jobs, higher profits and reduced exposure to repetitive or physically hard work with – sometimes low but present – safety risk. Main advantages of using Cobots over human-only operations: Increase productivity – frees-up human to work on other operations Reduce repetitive strain injuries and lifting Productivity rises without needing extra work space Human can focus on higher value tasks FEATURES OF HRC The-Next Evolution in Human-Robot Collaboration : KUKA LBR iiwa @ BMW Sensitivity sets cobots apart Together you can achieve something greater than just one of those elements on their own. The challenge is to change “binary” or very linear programming to a more intuitive level where robot behavior adapts to humans during a process, i.e human robot augmentation (HRA). For e.g. KUKA iiwa (Cobot) has been engineered with greater sensitivity, to work with and augment human operations. The lightweight iiwa’s high-performance servo control is able to detect contours quickly under force control. It establishes the correct installation position and mounts components quickly with high precision with an axis-specific torque accuracy of ±2% of the maximum torque. Augmenting industrial robots like cobots the number of industrial applications for such cobots is growing. At the moment it is dominated by the automotive industry, but retail, food, inspection and laboratory applications are rising. Large industrial robots are not designed to work next to humans; most are caged off to protect workers, and operate under a hierarchy of regulations covering safety. How do you get large industrial robots that normally operate at high speed to work closely with humans? This involves changing the robot programming software to make the robot more intelligent, more understanding of humans, and meshing this together so when the robot needs to move fast and operate high payloads it can, but when it needs to go into a human co-worker paradigm, it can without entering a default “safe” mode where you have to reset it. Real-time monitoring of 3D printing HRC shows real-time adaption to the process. Another application that displays adaptation is in 3D printing. As the robot deposits material it monitors it and automatically updates and augments itself depending on the measurements and the inspection. Machine learning and Artificial Intelligence Tasks that are simple to a human can be complex for a robot. For example, working out what an object looks like among many identical or similar objects, and how to grab that object is very complicated for a robot. The challenge for a robot becomes increasingly more complex when multiple objects are at an odd angle, other objects obscure their view, and it needs to approach it at a novel angle. Machine learning program can help the robot to see the wood for the trees. With today’s computing power, you can provide many computations of how that object might look in different scenarios and the robot can “learn” that, almost instantly, where it has learned that it can pass it on immediately to any other device in the network. A human might take many years to acquire and pass this on as a skill, but robots can do this quicker – within certain limitations. SOFTWARE Software development is key to collaborative robot applications. Programming is moving from “command code” to simulation and in the future, artificial intelligence that will enable task learning. There are three levels of software for robot programming. Industrial grade robot programming software that is dedicated to offline programming of robots and often uses a digital representation of a robot cell. The operator programs what he/she wants the robot to do then simulates it to ensure there are no collisions, it is safe, there are no singularities, no access limits. When he is happy you create the code that can drive the robot. At the mid-level – software is more experimental and is often used by the research institutions. This software experiments with digital fabrication and computational business information modelling. A product is taken from the design environment and straight to manufacture using a robot. The test cell is connected to sensors, monitors, peripheral equipment and often does not have the robustness of an industry grade application, because researchers want to change parameters quickly. Future stage – software that uses machine learning algorithms so robots can change their operation to adapt to the changing task, without resetting. The learning could involve risk assessment. In this paradigm, if there is a robot human collision the robot calculates what the force applied to the human would be and ensures it is within TS/ISO15066, the technical specification that defines how hard a body can be hit. HRC AND THE FUTURE OF MANUFACTURING Further adaptive programming OEMs investigating platform-based utilities where different functionalities are plumbed in, connected with sensors and peripheral equipment, to make it more where programming and operating a robot becomes a completely different experience to the normal offline programming, press and go. Here you have real-time updating of the code that is operating the robot – monitoring its environment and what it is doing, responding to the actions. Augmented reality and novel programming The use of augmented reality (AR) headsets provides a completely different way of communicating with robots, which is leading to new ways of programming robots. AR will accelerate the speed of robot movement adaptation. HRC is not just about the humans and robots working together safely but also about different ways of humans talking to and programming robots, and talking to and communicating back to humans. When we start to incorporate vision systems, speech recognition systems, different ways of programming using hand gestures or signal-based methods, you will see a shift in how robots are programmed. Programming will become more intuitive for non-engineers. Robots will become more commoditized and democratized, more accessible to a wider number of people. Robots will by them be incredibly flexible devices. One day they could perform an industrial job and then more service-oriented tasks the next day. APPLICATIONS OF HRC Automotive assembly tasks, Machine tending, Medical Applications, Machining and trimming applications, Hybrid manufacturing, retail sector, Service robots, Astronomical Space applications, Autonomous applications and endless applications where humans need assistance!" },{ "title" : "PPT | Introduction to Industrial Robotics | KUKA" ,"category" : "jekyll" ,"tags" : "robotics, industrial automation, example post" ,"url" : "/IndustrialAutomation.html" ,"date" : "Aug 10, 2020" ,"content" : "&lt;!DOCTYPE html&gt; Page: 1 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Welcome to our Webinar on, Introduction to Industrial Robotics. KUKA India Support: service@kuka.in ; +91-9158007870 www.kuka.com Time will be provided after Webinar for Q&amp;A discussion. Session: 1 Hrs., Q&amp;A: 10 Minutes. Because time is tight, we need your attention ! Page: 2 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Majored in Mechatronics engineering from VIT University and Bachelor engineering in Mechanical from ACS College of engineering, Bangalore. 4 years of robotics and automation experience from KUKA India Pvt Ltd in Application, Troubleshooting, Project management etc. Mechanical Engineering from Shivaji University, Kolhapur. Over 3.5 years of experience in KUKA Robotics for Product Support, Solutions/Projects. vipin@kuka.in pawan@kuka.in Presenter’s Intro Vipin K Pawankumar G Page: 3 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com What is Robot ? • In our imagination, a robot is a machine that looks and acts like a human being. Page: 4 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com What is Robot ? • Robots have become a subject of great interest nowadays. • As Robots tends to replicate Human-beings, they appears to be more interesting. Page: 5 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Page: 6 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com In Fact.. Robots are defined as man-made mechanical devices that can move by themselves, whose motion must be modeled, planned, sensed, actuated and controlled, and whose motion behavior can be influenced by “programming”. Page: 7 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Page: 8 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com 1) Mobile robots. 2) Industrial robots. 3) Autonomous robots. 4) Remote-controlled robots. 5) Virtual robots. Types of Robots Page: 9 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Types of Robots 1) Mobile robots. 2) Industrial robots. 3) Autonomous robots. 4) Remote-controlled robots. 5) Virtual robots. Page: 10 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Types of Robots 1) Mobile robots. 2) Industrial robots. 3) Autonomous robots. 4) Remote-controlled robots. 5) Virtual robots. Mobile robots are able to move, usually they perform tasks such as searching. They are of 2 types: - Rolling robots- Rolling robots have wheels to move around. They can quickly and easily search. However they are only useful in flat areas. Walking robots- Robots on legs are usually brought in when the terrain is rocky. Most robots have at least 4 legs; usually they have 6 or more. Page: 11 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Types of Robots 1) Mobile robots. 2) Industrial robots 3) Autonomous robots 4) Remote-controlled robots. 5) Virtual robots. Mobile robots are able to move, usually they perform tasks such as searching. They are of 2 types: - Rolling robots- Rolling robots have wheels to move around. They can quickly and easily search. However they are only useful in flat areas. Walking robots- Robots on legs are usually brought in when the terrain is rocky. Most robots have at least 4 legs; usually they have 6 or more. Page: 12 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Types of Robots 1) Mobile robots. 2) Industrial robots. 3) Autonomous robots. 4) Remote-controlled robots. 5) Virtual robots. • Most of these robots perform repeating tasks without ever moving. • Most robots are working in industries. Especially dull and repeating tasks are suitable for robots. • A robot never grows tired; it will perform its duty day and night without ever complaining. Page: 13 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Types of Robots 1) Mobile robots. 2) Industrial robots 3) Autonomous robots 4) Remote-controlled robots. 5) Virtual robots. • Most of these robots perform repeating tasks without ever moving. • Most robots are working in industries. Especially dull and repeating tasks are suitable for robots. • A robot never grows tired; it will perform its duty day and night without ever complaining. Page: 14 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Types of Robots 1) Mobile robots. 2) Industrial robots. 3) Autonomous robots. 4) Remote-controlled robots. 5) Virtual robots. • Autonomous robots are self-supporting. • They run a program that gives them the opportunity to decide on the action to perform depending on their surroundings. • At times, these robots even learn new behavior. They start out with a short routine and adapt this routine to be more successful at the task they perform. The most successful routine will be repeated . • Autonomous robots are self-supporting. • They run a program that gives them the opportunity to decide on the action to perform depending on their surroundings. • At times, these robots even learn new behavior. They start out with a short routine and adapt this routine to be more successful at the task they perform. The most successful routine will be repeated . Page: 15 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Types of Robots 1) Mobile robots. 2) Industrial robots 3) Autonomous robots 4) Remote-controlled robots. 5) Virtual robots. • Autonomous robots are self-supporting. • They run a program that gives them the opportunity to decide on the action to perform depending on their surroundings. • At times, these robots even learn new behavior. They start out with a short routine and adapt this routine to be more successful at the task they perform. The most successful routine will be repeated . • Autonomous robots are self-supporting. • They run a program that gives them the opportunity to decide on the action to perform depending on their surroundings. • At times, these robots even learn new behavior. They start out with a short routine and adapt this routine to be more successful at the task they perform. The most successful routine will be repeated . Page: 16 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Types of Robots 1) Mobile robots. 2) Industrial robots. 3) Autonomous robots. 4) Remote-controlled robots. 5) Virtual robots. • In case a robot needs to perform more complicated yet undetermined tasks an autonomous robot is not the right choice. • Complicated tasks are still best performed by human beings with real brainpower. A person can guide a robot by remote control. A person can perform difficult and usually dangerous tasks without being at the spot where the tasks are performed. Page: 17 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Types of Robots 1) Mobile robots. 2) Industrial robots. 3) Autonomous robots. 4) Remote-controlled robots. 5) Virtual robots. • Virtual robots don’t exits in real life. Virtual robots are just programs, building blocks of software inside a computer. • A virtual robot can simulate a real robot or just perform a repeating task. • Search engines use such kind of robots. They search the World Wide Web and send the information to the search engines. Page: 18 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Industrial Robotics Page: 19 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Types of Industrial Robots: Page: 20 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Page: 21 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Yash Page: 22 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Page: 23 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Yaskawa Page: 24 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Page: 25 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Page: 26 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Page: 27 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Page: 28 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Do the Math… Same with Industrial Robotics: 2 shifts / day for 20 Years Rebuild once in 20 years…….…….$10,000 Maintenance for 20 years…….……$13,000 Lubrication………………..$3,000 Unscheduled repairs…..$10,000 Power 0.59 x 80,000 hours…….…..$47,200 Total ………………………….…….… $70,200 Same with Manual Labor: 80,000 hours x $30.00…….…… $2,400,000 Savings……………………...…… $2,329,800 Page: 29 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com What is Industrial Robot? Page: 30 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com CNC Machine: Page: 31 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Tele Manipulation: Page: 32 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Mechanical Tele-manipulators CNC : Computer Numeric Control Principles Robot : Computer Controlled Manipulator. Page: 33 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com • Increased efficiency. • Improved quality. • High repeatability of products. • Even can work in hazardous environment. • Longer working hours. • Reduced investments. • Reduced cycle time. • Less requirement of skilled labors. • Adaptive to the production requirements/flexibility. • Easy modification of parameters. • Greater safety. • Reduced direct labor costs. • Reduced wastage of resources. Page: 34 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Production Piece Production Batch Production Mass Production Robotic Automation SPM, Specialized application machines etc.… Robotic Automation With easy programming methods Production Methods: Page: 35 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Remember this for a moment… Page: 36 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com 20 microns Page: 37 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Page: 38 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Robotics Industry Players: Robot Manufacturers: • Manufactures the robot • Provides robot training, maintenance and service System Integrator [System Builder]: • Integrate the robot into a system to perform a specified task • Independent business, industry specific, allegiance to robot manufacturer • Has knowledge of End User’s business • Provides system components, installation, training, service and support • Design and build the robot based system • Purchases robot and all peripheral equipment • Designs and builds systems, writes and maintains programs • Trained on entire cell / provides training on system. End Users: • Uses the robotic based system in production or processing • Knows what is required to accomplish tasks • Ultimate user - needs training, service, maintenance, spare parts Page: 39 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Robot Manufacturers: Page: 40 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com End Customer System Integrator Product Manufacturer (E.g. KUKA Robot) Signoff &amp; Delivery Order System Integrator [System Builder]: Page: 41 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Page: 42 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Page: 43 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com End Customers: Page: 44 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Page: 45 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com ROS Support on Robots: KUKA Controller Page: 46 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Real World Industrial Applications 1. Spot Welding • Spot welding joins two contacting metal surfaces by directing a large current through the spot, which melts the metal and forms the weld delivered to the spot in a very short time (approximately ten milliseconds). Page: 48 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Spot Gun: Page: 49 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com 2. Arc Welding • Arc welding, or robot welding, • became common place in the 1980s. • One of the driving forces for • switching to robot welding is • improving the safety of workers from arc • burn and inhaling hazardous fumes. Page: 50 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com • Materials handling robots are utilized to move, pack and select products. • They also can automate functions involved in the transferring of parts from one piece of equipment to another. Direct labor costs are reduced and much of the tedious and hazardous activities traditionally performed by human labor are eliminated. 3. Materials Handling, Tending Page: 51 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com 4. Painting • Robotic painting is used in automotive production and many other industries as it increases the quality and consistency of the product. Cost savings are also realized through less rework. Page: 52 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com 5. Mobile Handling • Mobile handling plays important role to optimize material flow on Shop floor, especially for Assembly lines. Page: 53 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com 6. Picking, Packing and Palletizing • Most products are handled multiple times prior to final shipping. • Robotic picking and packaging increases speed and accuracy along with lowering production costs. Page: 54 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com 7. Assembly • Robots routinely assemble products, eliminating tedious and tiresome tasks. Robots increase output and reduce operational costs. Page: 55 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com 8. Mechanical Cutting, Grinding, Deburring and Polishing • Building dexterity into robots provides a manufacturing option that is otherwise very difficult to automate. An example of this is the production of orthopedically implants, such as knee and hip joints. Buffing and polishing a hip joint by hand can normally take 45-90 minutes while a robot can perform the same function in just a few minutes. Page: 56 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com 9. Gluing, Adhesive Sealing and Spraying Materials • Sealer robots are built with numerous arm configurations that enable the robot to apply adhesives to any type of product. The primary benefit in this application is increased quality, speed and consistency of the final product. Page: 57 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com 10. Other Processes • These include inspection, waterjet cutting , soldering robots, etc. Page: 58 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com What NEXT ?... Page: 59 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Artificial Intelligence. Internet of things (Industry 4.0) Micro/ Nano robots. Rescue Robots in Various domains. Robot for defense. Child care robot. Law and enforcement. Home care and security. Defense applications. Space exploration and research. Deep sea mining and mineral search. Fast medical curing. Planet cleaning etc… 𝙼𝚘𝚋𝚒𝚕𝚎 𝚁𝚘𝚋𝚘𝚝𝚜 Page: 60 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com KUKA College college@kuka.in KUKA, Yaskawa, Fanuc etc. training schools provides hands-on product and programming know how. Page: 61 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com  Basic PC knowledge.  PC hardware and control  Programming basics (any one programming knowledge)  Electronic basic components knowledge.  Electronics circuit design.  Electrical wiring basics.  Servo control basics.  Micro controller and programming.  Power electronics basics.  Mechanical design, CAD Drawing.  Kinematic chain.  Material science.  Mechanical Manufacturing  Mechanical tools knowledge.  Force/load distribution and analysis etc.. Note: Multi disciplinary branch Page: 62 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com • An Introduction to Programming - When students program physical robots, it’s easier for them to see what goes wrong as they learn what robots can and cannot do. They learn the skills needed to create precise and accurate instructions and have fun while learning valuable lessons. • Increases Creativity - Not a lot of fields combine creativity with engineering and technology—robotics does. • Prepare them for the future - Growing industries such as these are going to need people who can come up with new and innovative ideas, and be equipped with the knowledge to design and create the technology needed. • Teaching Student How to Innovate - Not only does teaching students robotics teach them how to persist and solve problems, but it also helps them increase their maturity levels and prepare them for real-world situations. Page: 63 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com As Programmer’s across clients Page: 64 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com HUMAN-Robot Collaboration &gt;&gt; Page: 65 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Assisting or Replacing Humans in the Space ! Page: 66 Introduction to Industrial Robotics| Vipin K, Pawankumar G| 08-05-2020| www.kuka.com Thank You ! For Quires please reach us on: Vipin@kuka.in Pawan@kuka.in" },{ "title" : "2020 Timelapse of India from Space – RealTime Satellite Imaging" ,"category" : "jekyll" ,"tags" : "robotics, industrial automation, example post" ,"url" : "/zoomEarth.html" ,"date" : "Apr 1, 2020" ,"content" : "Spectacular view of India and world from Jan to Dec 2020, see how Vegetation and Mountain ice forms and deforms. About Zoom Earth Zoom Earth shows live weather satellite images updated in near real-time, and the best high-resolution aerial views of the Earth in a fast, zoomable map. Explore recent images of storms, wildfires, property and more. Live weather imagery is updated every 10 minutes via satellites NOAA GOES and JMA Himawari-8, and every 15 minutes via EUMETSAT Meteosat satellites. Daily imagery is provided by services from NASA’s GIBS, part of EOSDIS. NASA-NOAA satellite Suomi-NPP, and MODIS Aqua and Terra provide continuous imagery for “AM” at local 10:30am, and “PM” at local 1:30pm. Historical imagery is sourced from Microsoft and Esri. Storm tracks and forecast maps are created using the most recent data from NHC, JTWC and IBTrACS. Fire spots show sources of high temperature per day, using data from FIRMS via GIBS. Follow Zoom Earth on Twitter for the latest updates." },{ "title" : "OPC UA Server and Client Simple Example – Python" ,"category" : "jekyll" ,"tags" : "robotics, industrial automation, example post" ,"url" : "/KUKA-OPC.html" ,"date" : "Apr 1, 2019" ,"content" : "OPC Unified Architecture (OPC UA) is a machine to machine communication protocol for industrial automation developed by the OPC Foundation. Below is the example code to exhange data between two machine in network. As a example we are using python. Create Test Server on Machine 1: from opcua import Server from random import randint import datetime import time server = Server() url = \"opc.tcp://127.0.0.1:4840\" server.set_endpoint(url) name = \"OPC_SIMULATION_SERVER\" addspace = server.register_namespace(name) node = server.get_objects_node() Param = node.add_object(addspace, \"Parameters\") Temp = Param.add_variable(addspace, \"Temperature\", 0) Press = Param.add_variable(addspace, \"Pressure\", 0) Time = Param.add_variable(addspace, \"Time\", 0) Temp.set_writable() Press.set_writable() Time.set_writable() server.start() print(\"Server started at {}\".format(url)) while True: Temperature = randint(10,50) Pressure = randint(200, 999) TIME = datetime.datetime.now() print(Temperature, Pressure, TIME) Temp.set_value(Temperature) Press.set_value(Pressure) Time.set_value(TIME) time.sleep(0.1) Create Test Client Machine 2: from opcua import Client import time url = \"opc.tcp://127.0.0.1:4840\" client = Client(url) client.connect() print(\"Client Connected\") while True: Temp = client.get_node(\"ns=2;i=2\") Temperature = Temp.get_value() print(Temperature) Download and Install OPC UA Client Free from Unified Automation Website ( https://www.unified-automation.com/downloads/opc-ua-clients.html ) to view Node ids. Connect Machine 1 and Machine 2 with suitable network (e.g. Ethernet) Start server and then run client Client will print fetched data from Server. That’s cool Testing is completed ! Also, Example Code for OPC UA Client for KUKA OPC UA Server on Robot Controller: Code has to run on client side(Laptop with Python installed). Prerequisites: 1.OPC UA installed on KUKA Controller. Install OPCUA using PIP install PIP Install Cryptography Below code will connect with KUKA Controller OPC port &gt; fetch data from node &gt; Print Data (Here MyPos Variable from $config.dat)&gt;Logs data to CSV file to specified path. from opcua import Client import time import csv print(\"Starting\") url = \"opc.tcp://192.168.1.147:4840\" # IP Address of KLI - KUKA client = Client(url) client.set_user(\"opcuaoperator\")#Check username with KUKA OPC Documentation client.set_password(\"kuka\")#Check password with KUKA OPC Documentation client.connect() print(\"Client Connected to KUKA OPC Server\") X = client.get_node(\"ns=5;s=MotionDeviceSystem.ProcessData.R1.System.$config.MYPOS.X\") Y = client.get_node(\"ns=5;s=MotionDeviceSystem.ProcessData.R1.System.$config.MYPOS.Y\") Z = client.get_node(\"ns=5;s=MotionDeviceSystem.ProcessData.R1.System.$config.MYPOS.Z\") # $ACCU_STATE is battery state Xx = str(X.get_value()) Yy = str(Y.get_value()) Zz = str(Z.get_value()) print(\"My Pos:\" + \"X : \" + Xx + \" Y: \" + Yy + \" Z: \" + Zz) temp = X.set_value(1200) temp = Y.set_value(5) temp = Z.set_value(1174) with myFile: writer = csv.writer(myFile) writer.writerows([now,now]) with open(\"E:/\"filename\".csv\", \"a\") as log: log.write(\"{0},{1}\\n\".format(now,str(Xx))) See complete “KUKA OPC UA with GUI on Python” at https://github.com/pawankumargurav/kukaopcua" },{ "title" : "Webinar-What is COBOT ? Collaborative Robots Today! Explained with Manufacturing Applications" ,"category" : "jekyll" ,"tags" : "robotics, industrial automation, example post" ,"url" : "/cobot.html" ,"date" : "Apr 1, 2019" ,"content" : "Webinar-What is COBOT ? Collaborative Robots Today! Explained with Manufacturing Applications Pawankumar Gurav 3 years ago Cobots i.e. Collaborative robots would be leading the Manufacturing industry in upcoming years. This Webinar will focus on What is Cobot ? and its applications. Watch complete Webinar to get glimpse of Cobots in Industrial Market." },{ "title" : "AC Signal Amplifier with single Transistor | Simple Radio AM/FM Amplification | Faithful and Unfaithful Amplification" ,"category" : "jekyll" ,"tags" : "robotics, industrial automation, example post" ,"url" : "/amplication.html" ,"date" : "Apr 1, 2019" ,"content" : "FAITHFUL AMPLIFICATION: The process of raising the strength of a weak signal without any change in its general shape i.e amplifying both the half cycles of a signal is called Faithful amplification. UNFAITHFUL AMPLIFICATION: The process in which we get an amplified output of the signal with its negative half cycles completely cut off is called unfaithful amplification. This principle of Amplification can be used to develop Radio signal power boosters, e.g. FM signal (88 – 108 Mhz) with low transmitting power is boosted to high power signal to radiate in long range radio application. Note: Playing with Long range Radio Signals without license is Illegal across many countries." },{ "title" : "About" ,"category" : "" ,"tags" : "" ,"url" : "/tabs/relay.html" ,"date" : "Aug 26, 2023" ,"content" : "PawankumarG.com | Relaying Please Wait... Connecting to pawankumargapp, please wait..." },{ "title" : "Projects" ,"category" : "" ,"tags" : "" ,"url" : "/tabs/projects.html" ,"date" : "Aug 26, 2023" ,"content" : "main header Projects info Creating projects was fun and interesting.. text_color white img :projects-heading.jpg back_color lightblue category title eBike type id_ebike color gray title Picture type id_picture color #62b462 title Quote type id_quote color #2FD0ED list type id_ebike project_name Heavy Duty EBike project_excerpt 35 KMPH with 2 persons img :ebike_pawan.jpg img_title ebike_pawan date 2021-03-13 post # Petrol to Electric ⚡ Powered with 30 AH battery and 750 watt BLDC motor with efficient speed controller. Tested for 60 KMs with 30 KMPH Homemade so costed toooo less :) tvs xl super mod electric bike 😄 type id_picture project_name Example Project project_excerpt Picture img :project2_thumb.jpg img_title img title2 date 2021-04-23 post # Title This is project content. !Image(:project2_thumb.jpg) type id_quote project_name Example Project project_excerpt William Shakespeare date 2021-05-27 post Let me not to the marriage of true minds Admit impediments. Love is not love Which alters when it alteration finds Or bends with the remover to remove. O no it is an ever-fixed mark That looks on tempests and is never shaken; It is the star to every wand'ring barque Whose worth's unknown although his height be taken. Love's not Time's fool though rosy lips and cheeks Within his bending sickle's compass come; Love alters not with his brief hours and weeks But bears it out even to the edge of doom. If this be error and upon me proved I never writ nor no man ever loved." },{ "title" : "Links" ,"category" : "" ,"tags" : "" ,"url" : "/tabs/links.html" ,"date" : "Aug 26, 2023" ,"content" : "main header Links info Your Links page description. category title JekyII / Liquid type id_jekyiiliquid color gray title Web Design type id_webdesign color #F4A273 title Programming type id_programming color #62b462 list nil type id_programming title Stack OverFlow url https://stackoverflow.com/ info Stack Overflow is a question and answer website for professional and enthusiastic programmers. type id_jekyiiliquid title Jekyll url https://jekyllrb.com/ info Transform your plain text into static websites and blogs. type id_jekyiiliquid title Jekyll Cheat Sheet url https://cloudcannon.com/community/jekyll-cheat-sheet/ info There are so many Jekyll variables and filters to remember and it can be tricky to keep it all in your head. This cheat sheet serves as a quick reference of everything Jekyll can do. type id_jekyiiliquid title Liquid for Designers url https://github.com/Shopify/liquid/wiki/Liquid-for-Designers info Liquid for Designers wiki on GitHub type id_jekyiiliquid title Liquid for Programmers url https://github.com/Shopify/liquid/wiki/Liquid-for-Programmers info Liquid for Programmers wiki on GitHub type id_jekyiiliquid title Liquid Reference url https://shopify.dev/api/liquid/ info Liquid is a template language created by Shopify and written in Ruby. It is now available as an open source project on GitHub type id_webdesign title W3Schools url https://www.w3schools.com/ info W3Schools offers free online tutorials references and exercises in all the major languages of the web. Covering popular subjects like HTML CSS JavaScript Python SQL Java and many more." },{ "title" : "About" ,"category" : "" ,"tags" : "" ,"url" : "/tabs/about.html" ,"date" : "Aug 26, 2023" ,"content" : "Hello Sample Sample Sample Sample Sample" } ]
